{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","src","alt","className","s","description","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","contact","i","Preloader","Post","item","message","likesCount","MyPosts","memo","postsElements","posts","p","id","postsBlock","AddPostFormRedux","onSubmit","values","addPost","newPost","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.ba1287af.chunk.js","sourcesContent":["import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login'/>\n            return <Component {...this.props}/>\n        }\n    }\n\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2yWda\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useEffect, useState} from 'react'\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status ])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} value={status} autoFocus={true}/>\n                </div>\n            }\n\n\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div>\n                <img\n                    src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\n                    alt=\"img\"/>\n\n            </div>\n            <div className={s.description}>\n\n                <div>\n                    <img src={profile.photos.large} alt=\"\"/>\n                </div>\n                <div>\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                    <div>\n                        Меня зовут: {profile.fullName}\n                    </div>\n                    <div>\n                        Обо мне: {profile.aboutMe}\n                    </div>\n                    <div>\n                        Работу {profile.lookingForAJob ? profile.lookingForAJobDescription : 'ищу :('}\n                    </div>\n                    <div> Мои контакты:\n                        {\n                        Object.keys(profile.contacts).map((contact,i) => {\n                            return (\n                                <span key={i}> {contact}, </span>\n                            )\n                        })\n                    }\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css'\n\nconst Post = (props) => {\n    return (\n\n        <div className={s.item}>\n            <img src=\"https://i.pinimg.com/236x/c2/af/09/c2af0941a9eace5f0ba3dc63284d3860--mr-bean-funny-color-blue.jpg\"\n                 alt=\"\"/>\n            {props.message}\n            <div>Likes: {props.likesCount}</div>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nconst MyPosts =  React.memo(props => {\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPost)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Posts</h3>\n            <AddPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n\n        </div>\n    )\n});\n\nconst maxLength10 = maxLengthCreator(10)\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                    <Field component={Textarea}\n                           name='newPost'\n                           placeholder='Add your post'\n                           validate={[required, maxLength10]}\n                    />\n            </div>\n            <div>\n                <button>Add Post</button>\n            </div>\n\n        </form>\n    )\n}\n\nconst AddPostFormRedux = reduxForm({form: 'profileAddPostForm'})(AddNewPostForm)\n\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPost) => {dispatch(addPostActionCreator(newPost))}\n    }\n}\n\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\n\nconst Profile = (props) => {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n\n    )\n\n}\n\n\nexport default Profile;\n\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if(!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n\n    render() {\n\n\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}/>\n\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    // withAuthRedirect\n)(ProfileContainer)\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}
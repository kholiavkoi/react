{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialogUser","dialog","activeClassName","active","src","img","alt","name","Message","message","maxLength20","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,WAAa,8B,qJCGlNC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,2FCH9DM,EAVI,SAACJ,GAChB,IAAIK,EAAI,mBAAeL,EAAMM,IAC7B,OACI,qBAAKC,UAAWC,IAAEC,WAAlB,SACI,eAAC,IAAD,CAASR,GAAII,EAAME,UAAWC,IAAEE,OAAQC,gBAAiBH,IAAEI,OAA3D,cAAoE,qBAAKC,IAAKb,EAAMc,IAAKC,IAAI,KAA7F,IAAmGf,EAAMgB,KAAzG,UCIGC,EATC,SAACjB,GACb,OACI,qBAAKO,UAAWC,IAAEU,QAAlB,SACKlB,EAAMkB,W,iCC2BbC,EAAcC,YAAiB,IAkB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAjBL,SAACtB,GAEpB,OACI,uBAAMwB,SAAUxB,EAAMyB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAK,iBACLa,YAAY,qBACZC,SAAU,CAACC,IAAUZ,OAEhC,8BACI,kDAQDa,EA7CC,SAAChC,GAEb,IAAIP,EAAQO,EAAMiC,YAEdC,EAAkBzC,EAAM0C,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMF,IAAKuB,EAAEvB,IAAgBR,GAAI+B,EAAE/B,IAAZ+B,EAAE/B,OACtFgC,EAAmB7C,EAAM8C,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,SAAjBsB,EAAElC,OAQ/D,OACI,sBAAKC,UAAWC,IAAE2B,QAAlB,UACI,qBAAK5B,UAAWC,IAAEiC,aAAlB,SACKP,IAEL,qBAAK3B,UAAWC,IAAE+B,SAAlB,SACKD,IAEL,cAACjB,EAAD,CAAqBG,SAbT,SAACkB,GACjB1C,EAAM2C,YAAYD,EAAOE,uB,wBCClBC,sBACX1C,aAbkB,SAACV,GACnB,MAAO,CACHwC,YAAaxC,EAAMwC,gBAIF,SAACa,GACtB,MAAO,CACHH,YAAa,SAACC,GAAoBE,EAASC,YAAmBH,SAMlEhD,IAFWiD,CAGbb","file":"static/js/4.bcd0e0cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialogUser\":\"Dialogs_dialogUser__2Bfra\"};","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login'/>\n            return <Component {...this.props}/>\n        }\n    }\n\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\nconst DialogItem = (props) => {\n    let path = `/dialogs/${props.id}`\n    return (\n        <div className={s.dialogUser}>\n            <NavLink to={path} className={s.dialog} activeClassName={s.active}> <img src={props.img} alt=\"\"/> {props.name} </NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n}\n\n\nexport default Message;","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} img={d.img} key={d.id} id={d.id}/>)\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\n\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\nconst maxLength20 = maxLengthCreator(20)\nconst AddMessageForm = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name='newMessageBody'\n                       placeholder='Enter your message'\n                       validate={[required, maxLength20]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\n\nexport default Dialogs;","import React from \"react\";\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {dispatch(sendMessageCreator(newMessageBody))},\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\n\n\n\n"],"sourceRoot":""}